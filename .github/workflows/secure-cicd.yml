name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

jobs:
  # Pre-commit checks
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install pre-commit
        run: pip install pre-commit
      
      - name: Run pre-commit
        run: pre-commit run --all-files

  # Static Application Security Testing (SAST)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'python, javascript'
          queries: security-extended,security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/sql-injection
            p/docker
            p/kubernetes
            p/terraform
      
      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json
      
      - name: Upload Bandit Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.json

  # Software Composition Analysis (SCA)
  sca:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'postgres-security'
          path: '.'
          format: 'SARIF'
          out: 'dependency-check-report.sarif'
          args: >
            --enableExperimental
            --suppression suppression.xml
      
      - name: Upload Dependency-Check Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: dependency-check-report.sarif

  # Container Security
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t postgres-security:test -f docker/Dockerfile .
      
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'postgres-security:test'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy Docker scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-docker-results.sarif'
      
      - name: Run Dockle for Dockerfile best practices
        uses: goodwithtech/dockle-action@v1
        with:
          image: 'postgres-security:test'
          format: 'sarif'
          output: 'dockle-results.sarif'
      
      - name: Upload Dockle Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'dockle-results.sarif'

  # Infrastructure as Code Security
  iac-security:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run TFSec
        uses: aquasecurity/tfsec-action@master
        with:
          format: sarif
          soft_fail: true
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file: checkov-results.sarif
      
      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
      
      - name: Run kube-linter
        uses: stackrox/kube-linter-action@v1
        with:
          directory: kubernetes/
          format: sarif
          output-file: kube-linter-results.sarif
      
      - name: Upload kube-linter Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: kube-linter-results.sarif

  # Secret Scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          format: sarif
          report-path: gitleaks-report.sarif
      
      - name: Upload GitLeaks Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-report.sarif

  # Database Security Testing
  database-security:
    name: Database Security Testing
    runs-on: ubuntu-latest
    needs: [sast, sca, iac-security]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Apply Security Configurations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f security_tiers/basic/setup.sql
      
      - name: Run pgTAP Security Tests
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f test/pgTAP/04-security_test.sql
      
      - name: Run SQL Injection Tests
        run: |
          pip install sqlmap
          sqlmap -u "http://localhost/api/v1/users?search=test" --dbms=PostgreSQL --batch --level=5 --risk=3 --random-agent --technique=BEUST

  # Build and Push (only on main branch)
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [container-security, database-security, secret-scanning]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            your-dockerhub-username/postgres-examples:latest
            your-dockerhub-username/postgres-examples:${{ github.sha }}
          cache-from: type=registry,ref=your-dockerhub-username/postgres-examples:buildcache
          cache-to: type=registry,ref=your-dockerhub-username/postgres-examples:buildcache,mode=max
          provenance: true
          sbom: true
      
      - name: Sign the Docker Image
        uses: sigstore/cosign-installer@main
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Sign Container Image
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY \
            your-dockerhub-username/postgres-examples:${{ github.sha }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  # Compliance Checks
  compliance:
    name: Compliance Checks
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Compliance Checks
        run: |
          # Run compliance checks for various standards
          ./scripts/compliance/check_compliance.sh --standard=pci-dss
          ./scripts/compliance/check_compliance.sh --standard=hipaa
          ./scripts/compliance/check_compliance.sh --standard=gdpr
          ./scripts/compliance/check_compliance.sh --standard=soc2
      
      - name: Generate Compliance Report
        run: |
          ./scripts/compliance/generate_report.sh
      
      - name: Upload Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.pdf
