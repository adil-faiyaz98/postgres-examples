---
- name: Deploy PostgreSQL Server
  hosts: db_servers
  become: yes
  vars:
    postgres_version: "15"
    postgres_data_dir: "/var/lib/postgresql/{{ postgres_version }}/main"
    postgres_conf_dir: "/etc/postgresql/{{ postgres_version }}/main"
    db_name: "db_dev"
    db_user: "app_user"
    db_password: "securepassword"
    backup_dir: "/var/lib/pgbackrest"
    s3_bucket: "s3://your-backups-bucket/"

  tasks:
    # Install PostgreSQL and Required Extensions
    - name: Install PostgreSQL and extensions
      apt:
        name:
          - "postgresql-{{ postgres_version }}"
          - "postgresql-contrib"
          - "postgresql-{{ postgres_version }}-pgtap"
          - "pgbackrest"
          - "barman"
        state: present
        update_cache: yes

    # Ensure PostgreSQL Service is Running
    - name: Ensure PostgreSQL is running
      systemd:
        name: postgresql
        state: started
        enabled: yes

    # Copy PostgreSQL Configuration Files
    - name: Configure PostgreSQL settings
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: "../config/postgres.conf", dest: "{{ postgres_conf_dir }}/postgresql.conf" }
        - { src: "../config/pg_hba.conf", dest: "{{ postgres_conf_dir }}/pg_hba.conf" }

    # Restart PostgreSQL to Apply Configuration Changes
    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    # Create PostgreSQL Users and Roles
    - name: Create PostgreSQL Users
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        encrypted: yes
        role_attr_flags: "LOGIN NOSUPERUSER"

    - name: Create Readonly Role
      postgresql_user:
        name: "readonly_user"
        password: "readonlypassword"
        encrypted: yes
        role_attr_flags: "LOGIN NOSUPERUSER"

    # Create PostgreSQL Database
    - name: Create PostgreSQL Database
      postgresql_db:
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        encoding: "UTF8"
        lc_collate: "en_US.UTF-8"
        lc_ctype: "en_US.UTF-8"
        state: present

    # Initialize Database Schema
    - name: Run Schema Initialization Scripts
      postgresql_script:
        db: "{{ db_name }}"
        path: "../init/03-create-tables.sql"

    # Setup Monitoring & Logging
    - name: Configure Prometheus for PostgreSQL Monitoring
      template:
        src: "../monitoring/prometheus.yml"
        dest: "/etc/prometheus/prometheus.yml"

    - name: Restart PostgreSQL to Apply Monitoring
      systemd:
        name: postgresql
        state: restarted

    # Configure pgBackRest for Encrypted Backups
    - name: Configure `pgBackRest`
      template:
        src: "../config/pgbackrest.conf.j2"
        dest: "/etc/pgbackrest/pgbackrest.conf"

    - name: Create Backup Directory for pgBackRest
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0700"

    # Configure `Barman` for Streaming Backups
    - name: Configure `Barman`
      template:
        src: "../config/barman.conf.j2"
        dest: "/etc/barman.conf"

    # Restart PostgreSQL & Backup Services
    - name: Restart PostgreSQL & Backup Services
      systemd:
        name: postgresql
        state: restarted

    # Run an Initial Backup
    - name: Run Initial `pgBackRest` Backup
      command: "pgbackrest --stanza=db_dev --log-level-console=info backup"

    - name: Run Initial `Barman` Backup
      command: "barman backup db_dev"

    # Schedule Nightly Backups with `cron`
    - name: Schedule Nightly Encrypted Backups
      cron:
        name: "Nightly PostgreSQL Backup"
        job: "/usr/bin/pgbackrest --stanza=db_dev --log-level-console=info backup"
        minute: "0"
        hour: "3"
        user: postgres
