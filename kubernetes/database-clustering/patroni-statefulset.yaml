apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-cluster
  namespace: postgres-security
spec:
  serviceName: postgres-cluster
  replicas: 3
  selector:
    matchLabels:
      app: postgres-cluster
  template:
    metadata:
      labels:
        app: postgres-cluster
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15.4-alpine
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          privileged: false
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/conf.d
        - name: patroni-config
          mountPath: /etc/patroni
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 15
      - name: patroni
        image: patroni:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          privileged: false
        env:
        - name: PATRONI_SCOPE
          value: postgres-cluster
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_LABELS
          value: '{app: postgres-cluster}'
        - name: PATRONI_SUPERUSER_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PATRONI_REPLICATION_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: replication_username
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: replication_password
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(POD_IP):5432"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(POD_IP):8008"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 8008
          name: patroni-api
        volumeMounts:
        - name: patroni-config
          mountPath: /etc/patroni
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8008
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /liveness
            port: 8008
          initialDelaySeconds: 15
          periodSeconds: 20
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: patroni-config
        configMap:
          name: patroni-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-cluster
  namespace: postgres-security
  labels:
    app: postgres-cluster
spec:
  selector:
    app: postgres-cluster
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-master
  namespace: postgres-security
  labels:
    app: postgres-cluster
spec:
  selector:
    app: postgres-cluster
    role: master
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: patroni-config
  namespace: postgres-security
data:
  patroni.yaml: |
    scope: postgres-cluster
    namespace: /postgres-cluster/
    name: ${PATRONI_NAME}
    
    restapi:
      listen: 0.0.0.0:8008
      connect_address: ${PATRONI_RESTAPI_CONNECT_ADDRESS}
    
    bootstrap:
      dcs:
        ttl: 30
        loop_wait: 10
        retry_timeout: 10
        maximum_lag_on_failover: 1048576
        postgresql:
          use_pg_rewind: true
          use_slots: true
          parameters:
            max_connections: 1000
            shared_buffers: 1GB
            effective_cache_size: 3GB
            maintenance_work_mem: 256MB
            checkpoint_completion_target: 0.9
            wal_buffers: 16MB
            default_statistics_target: 100
            random_page_cost: 1.1
            effective_io_concurrency: 200
            work_mem: 8MB
            min_wal_size: 1GB
            max_wal_size: 4GB
            max_worker_processes: 8
            max_parallel_workers_per_gather: 4
            max_parallel_workers: 8
            wal_level: logical
            hot_standby: "on"
            wal_log_hints: "on"
            max_wal_senders: 10
            max_replication_slots: 10
            hot_standby_feedback: "on"
            log_min_duration_statement: 1000
            log_checkpoints: "on"
            log_connections: "on"
            log_disconnections: "on"
            log_lock_waits: "on"
            log_temp_files: 0
            log_autovacuum_min_duration: 0
            track_activities: "on"
            track_counts: "on"
            track_io_timing: "on"
            track_functions: all
            track_activity_query_size: 4096
            log_statement: 'ddl'
            log_line_prefix: '%m [%p] %q%u@%d '
            log_duration: "on"
            password_encryption: 'scram-sha-256'
            ssl: "on"
            ssl_cert_file: '/etc/certs/server.crt'
            ssl_key_file: '/etc/certs/server.key'
            ssl_ca_file: '/etc/certs/ca.crt'
            ssl_prefer_server_ciphers: "on"
            ssl_min_protocol_version: 'TLSv1.2'
            ssl_ciphers: 'HIGH:!aNULL:!MD5'
      initdb:
        - encoding: UTF8
        - data-checksums
        - locale: en_US.UTF-8
      pg_hba:
        - host replication replicator 127.0.0.1/32 scram-sha-256
        - host replication replicator 10.0.0.0/8 scram-sha-256
        - host all all 0.0.0.0/0 scram-sha-256
        - hostssl all all 0.0.0.0/0 scram-sha-256
    
    postgresql:
      listen: 0.0.0.0:5432
      connect_address: ${PATRONI_POSTGRESQL_CONNECT_ADDRESS}
      data_dir: /var/lib/postgresql/data/pgdata
      pgpass: /tmp/pgpass
      authentication:
        superuser:
          username: ${PATRONI_SUPERUSER_USERNAME}
          password: ${PATRONI_SUPERUSER_PASSWORD}
        replication:
          username: ${PATRONI_REPLICATION_USERNAME}
          password: ${PATRONI_REPLICATION_PASSWORD}
      parameters:
        unix_socket_directories: '/var/run/postgresql'
    
    tags:
      nofailover: false
      noloadbalance: false
      clonefrom: false
      nosync: false
