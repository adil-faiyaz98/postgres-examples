apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-read-replicas
  namespace: postgres-security
spec:
  replicas: 3
  selector:
    matchLabels:
      app: postgres-read-replica
  template:
    metadata:
      labels:
        app: postgres-read-replica
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15.4-alpine
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          privileged: false
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PRIMARY_HOST
          value: postgres-master
        - name: PRIMARY_PORT
          value: "5432"
        - name: REPLICA_METHOD
          value: "streaming"
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/conf.d
        - name: replica-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 15
      volumes:
      - name: postgres-data
        emptyDir: {}
      - name: postgres-config
        configMap:
          name: postgres-read-replica-config
      - name: replica-init
        configMap:
          name: replica-init-scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-read-replica-config
  namespace: postgres-security
data:
  postgresql.conf: |
    # Read Replica Configuration
    hot_standby = on
    max_connections = 500
    shared_buffers = 1GB
    effective_cache_size = 3GB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 8MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    hot_standby_feedback = on
    
    # Security Settings
    password_encryption = 'scram-sha-256'
    ssl = on
    ssl_cert_file = '/etc/certs/server.crt'
    ssl_key_file = '/etc/certs/server.key'
    ssl_ca_file = '/etc/certs/ca.crt'
    ssl_prefer_server_ciphers = on
    ssl_min_protocol_version = 'TLSv1.2'
    ssl_ciphers = 'HIGH:!aNULL:!MD5'
    
    # Logging
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_line_prefix = '%m [%p] %q%u@%d '
    
    # Read-only settings
    default_transaction_read_only = on
    
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                scram-sha-256
    hostssl all             all             0.0.0.0/0               scram-sha-256
    host    replication     replicator      10.0.0.0/8              scram-sha-256
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: replica-init-scripts
  namespace: postgres-security
data:
  setup-replica.sh: |
    #!/bin/bash
    set -e
    
    # Wait for primary to be ready
    until pg_isready -h $PRIMARY_HOST -p $PRIMARY_PORT -U postgres; do
      echo "Waiting for primary database to be ready..."
      sleep 2
    done
    
    # Stop PostgreSQL if it's running
    pg_ctl -D "$PGDATA" -m fast -w stop || true
    
    # Clear data directory
    rm -rf "$PGDATA"/*
    
    # Create recovery.conf (for PostgreSQL < 12) or standby.signal (for PostgreSQL >= 12)
    if [ -f "$PGDATA/PG_VERSION" ] && [ $(cat "$PGDATA/PG_VERSION") -ge 12 ]; then
      # PostgreSQL 12+
      touch "$PGDATA/standby.signal"
      cat > "$PGDATA/postgresql.auto.conf" << EOF
    primary_conninfo = 'host=$PRIMARY_HOST port=$PRIMARY_PORT user=replicator password=$POSTGRES_PASSWORD application_name=$(hostname)'
    EOF
    else
      # PostgreSQL < 12
      cat > "$PGDATA/recovery.conf" << EOF
    standby_mode = 'on'
    primary_conninfo = 'host=$PRIMARY_HOST port=$PRIMARY_PORT user=replicator password=$POSTGRES_PASSWORD application_name=$(hostname)'
    EOF
    fi
    
    # Start PostgreSQL
    pg_ctl -D "$PGDATA" -w start
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-read-replicas
  namespace: postgres-security
  labels:
    app: postgres-read-replica
spec:
  selector:
    app: postgres-read-replica
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
